name: GossipApp CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**/*'
      - 'ansible/**/*'
      - 'compose.yml'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      build:
        description: 'Build Docker images'
        required: false
        default: false
        type: boolean
      bootstrap:
        description: 'Bootstrap infrastructure'
        required: false
        default: false
        type: boolean
      deploy:
        description: 'Deploy/update application'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    if: |
      github.event_name != 'workflow_dispatch' || 
      (github.event_name == 'workflow_dispatch' && !inputs.build)
    runs-on: ubuntu-latest
    outputs:
      app_is_changed: ${{ steps.detect.outputs.app_is_changed }}
      security_scan_needed: ${{ steps.detect.outputs.security_scan_needed }}
      tools_dockerfiles_matrix: ${{ steps.detect.outputs.tools_dockerfiles_matrix }}
      app_docker_is_changed: ${{ steps.detect.outputs.app_docker_is_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: detect
        run: |
          # Configuration
          TOOLS_DOCKERFILE_PATTERNS=("Dockerfile.prod.test" "Dockerfile.prod.format-lint" "Dockerfile.prod.security-scan")
          APP_PATTERN="src/"
          ANSIBLE_PATTERN="ansible/"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CHANGED_FILES="src/**/* ansible/**/* Dockerfile* compose.yml requirements.txt"
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "")
          fi
          
          echo Changed files: 
          echo "$CHANGED_FILES"
          
          # Detect Tools Dockerfile changes
          TOOLS_DOCKERFILES_CHANGED=""
          for pattern in "${TOOLS_DOCKERFILE_PATTERNS[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "^${pattern}$"; then
              TOOLS_DOCKERFILES_CHANGED="${TOOLS_DOCKERFILES_CHANGED:+$TOOLS_DOCKERFILES_CHANGED }$pattern"
            fi
          done
          
          # Build matrix for Tools Docker builds
          TOOLS_DOCKERFILES_MATRIX="[]"
          if [ -n "$TOOLS_DOCKERFILES_CHANGED" ]; then
            TOOLS_DOCKERFILES_TRIMMED=$(echo "$TOOLS_DOCKERFILES_CHANGED" | xargs)
            if [ -n "$TOOLS_DOCKERFILES_TRIMMED" ]; then
              TOOLS_DOCKERFILES_MATRIX=$(jq -n -c --arg files "$TOOLS_DOCKERFILES_TRIMMED" '$files | split(" ") | map(select(length > 0))')
              if ! echo "$TOOLS_DOCKERFILES_MATRIX" | jq . >/dev/null 2>&1; then
                echo "Error: Invalid JSON generated for matrix"
                exit 1
              fi
            fi
          fi
          
          APP_IS_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -q "$APP_PATTERN"; then
            APP_IS_CHANGED="true"
          fi
          echo "app_is_changed=$APP_IS_CHANGED" >> $GITHUB_OUTPUT
          
          ANSIBLE_IS_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -q "$ANSIBLE_PATTERN"; then
            ANSIBLE_IS_CHANGED="true"
          fi
          echo "ansible_is_changed=$ANSIBLE_IS_CHANGED" >> $GITHUB_OUTPUT
          
          SECURITY_SCAN_NEEDED="false"
          if [ -n "$CHANGED_FILES" ]; then
            SECURITY_SCAN_NEEDED="true"
          fi
          echo "security_scan_needed=$SECURITY_SCAN_NEEDED" >> $GITHUB_OUTPUT
          
          # Set outputs
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          printf "tools_dockerfiles_matrix=%s\n" "$TOOLS_DOCKERFILES_MATRIX" >> $GITHUB_OUTPUT
          
          # Detect app Docker changes (main Dockerfile only)
          APP_DOCKER_IS_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -q "^Dockerfile.prod$"; then
            APP_DOCKER_IS_CHANGED="true"
          fi
          echo "app_docker_is_changed=$APP_DOCKER_IS_CHANGED" >> $GITHUB_OUTPUT
          
          # Summary
          echo "Changed files: $CHANGED_FILES"
          echo "Tools Dockerfiles matrix: $TOOLS_DOCKERFILES_MATRIX"
          echo "App changed: $APP_IS_CHANGED"
          echo "Ansible changed: $ANSIBLE_IS_CHANGED"
          echo "Docker changed: $DOCKER_IS_CHANGED"
          echo "App Docker changed: $APP_DOCKER_IS_CHANGED"
          echo "Security scan: $SECURITY_SCAN_NEEDED"

  security-scan:
    needs: [detect-changes]
    if: needs.detect-changes.result == 'success' && needs.detect-changes.outputs.security_scan_needed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-tools:
    needs: [detect-changes, security-scan]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      ((needs.detect-changes.result == 'success' && needs.detect-changes.outputs.tools_dockerfiles_matrix != '[]') || 
      (needs.detect-changes.result == 'skipped' && github.event_name == 'workflow_dispatch' && inputs.build))
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.detect-changes.outputs.tools_dockerfiles_matrix || '["Dockerfile.prod.test", "Dockerfile.prod.format-lint"]') }}
      fail-fast: false
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.tools_dockerfile == 'Dockerfile.prod.test' && 'test' || matrix.tools_dockerfile == 'Dockerfile.prod.format-lint' && 'format-lint' || 'security-scan' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.tools_dockerfile }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.tools_dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  format-lint:
    needs: [detect-changes, security-scan, build-tools]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (needs.build-tools.result == 'success' || needs.build-tools.result == 'skipped') &&
      (needs.detect-changes.outputs.app_is_changed == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run formatting and linting
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/gossipapp-format-lint:latest

      - name: Commit formatting changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "Auto-format Python and YAML files"
            git push
          else
            echo "No formatting changes to commit"
          fi

  test:
    needs: [detect-changes, security-scan, build-tools, format-lint]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (needs.build-tools.result == 'success' || needs.build-tools.result == 'skipped') &&
      (needs.format-lint.result == 'success' || needs.format-lint.result == 'skipped') &&
      (needs.detect-changes.outputs.app_is_changed == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test structure
        run: |
          mkdir -p tests
          cat > tests/test_basic.py << 'EOF'
          import sys
          import os
          sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))
          
          def test_basic_math():
              """Test basic Python functionality"""
              assert 2 + 2 == 4
              assert "hello" + " " + "world" == "hello world"
          
          def test_imports():
              """Test that we can import modules without environment variables"""
              try:
                  # Test importing modules that don't require env vars
                  import asyncio
                  import random
                  import requests
                  assert True
              except ImportError as e:
                  assert False, f"Import error: {e}"
          
          def test_file_structure():
              """Test that required files exist"""
              import os
              assert os.path.exists('src/main.py')
              assert os.path.exists('src/client.py')
              assert os.path.exists('src/server.py')
              assert os.path.exists('requirements.txt')
          EOF

      - name: Run tests
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/gossipapp-test:latest

  build-app:
    needs: [detect-changes, security-scan, build-tools, format-lint, test]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (needs.build-tools.result == 'success' || needs.build-tools.result == 'skipped') &&
      (needs.format-lint.result == 'success' || needs.format-lint.result == 'skipped') &&
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      ((needs.detect-changes.result == 'success' && (needs.detect-changes.outputs.app_is_changed == 'true' || needs.detect-changes.outputs.app_docker_is_changed == 'true')) ||
      (needs.detect-changes.result == 'skipped' && github.event_name == 'workflow_dispatch' && inputs.build))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main app
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  check-dependencies:
    needs: [detect-changes, security-scan, build-tools, format-lint, test, build-app]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (needs.format-lint.result == 'success' || needs.format-lint.result == 'skipped') &&
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.build-app.result == 'success' || needs.build-app.result == 'skipped')
    uses: ./.github/workflows/cross-repo-dependencies.yml
    with:
      template-repo: 'SkiesGames/SkiesDota-CI-CD-Templates'
      check-files: |
        Dockerfile,
        ansible/galaxy.yml
      wait-timeout: 5
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  bootstrap:
    needs: [detect-changes, security-scan, build-tools, format-lint, test, build-app, check-dependencies]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (needs.format-lint.result == 'success' || needs.format-lint.result == 'skipped') &&
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.build-app.result == 'success' || needs.build-app.result == 'skipped') &&
      needs.check-dependencies.result == 'success' && 
      (github.event_name == 'workflow_dispatch' && inputs.bootstrap)
    uses: SkiesGames/SkiesDota-CI-CD-Templates/.github/workflows/reusable-ansible.yml@main
    with:
      playbook: playbooks/bootstrap.yml
      ansible_extra_env_json: '{}'
    secrets:
      ANSIBLE_HOSTS: ${{ secrets.ANSIBLE_HOSTS }}
      ANSIBLE_USER: ${{ secrets.ANSIBLE_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      ANSIBLE_EXTRA_SECRETS_JSON: ${{ secrets.ANSIBLE_EXTRA_SECRETS_JSON }}

  deploy:
    needs: [detect-changes, security-scan, build-tools, format-lint, test, build-app, check-dependencies, bootstrap]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (needs.format-lint.result == 'success' || needs.format-lint.result == 'skipped') &&
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.build-app.result == 'success' || needs.build-app.result == 'skipped') &&
      needs.check-dependencies.result == 'success' &&
      (needs.bootstrap.result == 'success' || needs.bootstrap.result == 'skipped') &&
      (vars.AUTO_DEPLOY == 'true' || (github.event_name == 'workflow_dispatch' && inputs.deploy))
    uses: SkiesGames/SkiesDota-CI-CD-Templates/.github/workflows/reusable-ansible.yml@main
    with:
      playbook: playbooks/deploy.yml
      ansible_extra_env_json: '{}'
    secrets:
      ANSIBLE_HOSTS: ${{ secrets.ANSIBLE_HOSTS }}
      ANSIBLE_USER: ${{ secrets.ANSIBLE_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      ANSIBLE_EXTRA_SECRETS_JSON: ${{ secrets.ANSIBLE_EXTRA_SECRETS_JSON }}

# deploy.yml
---
- name: Deploy/Update GossipApp
  hosts: all
  become: true
  tasks:
    - name: Stop GossipApp containers
      community.docker.docker_compose_v2:
        project_src: /opt/gossipapp
        state: absent

    - name: Sync updated repo files to VPS
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/../../"  # Sync entire repo
        dest: /opt/gossipapp/
        delete: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=logs"

    - name: Regenerate .env file based on VPS role
      ansible.builtin.copy:
        dest: /opt/gossipapp/.env
        content: |
          GITHUB_REPOSITORY_OWNER={{ ansible_extra_secrets_json.GITHUB_REPOSITORY_OWNER | default('your-username') }}
          IS_SERVER={{ lookup('env', 'IS_SERVER') | default('false') }}
          IS_CLIENT={{ lookup('env', 'IS_CLIENT') | default('false') }}
          COORDINATOR_IP={{ ansible_extra_secrets_json.COORDINATOR_IP | default(ansible_host) }}
          COORDINATOR_PORT={{ ansible_extra_secrets_json.COORDINATOR_PORT | default('8888') }}
          TELEGRAM_BOT_TOKEN={{ ansible_extra_secrets_json.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID={{ ansible_extra_secrets_json.TELEGRAM_CHAT_ID }}
        mode: '0600'

    - name: Pull latest Docker images
      community.docker.docker_compose_v2:
        project_src: /opt/gossipapp
        pull: always
        state: present

    - name: Deploy with force recreate
      community.docker.docker_compose_v2:
        project_src: /opt/gossipapp
        state: present
        recreate: always
        remove_orphans: true
        wait: true
        wait_timeout: 30

    - name: Wait for GossipApp to be ready (only for server)
      ansible.builtin.wait_for:
        port: 8888
        host: "{{ ansible_host }}"
        timeout: 60
      when: lookup('env', 'IS_SERVER') == 'true'

    - name: Check GossipApp health (only for server)
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}:8888/health"
        method: GET
        status_code: 200
      ignore_errors: yes
      register: health_check
      when: lookup('env', 'IS_SERVER') == 'true'

    - name: Display health check result
      ansible.builtin.debug:
        msg: "GossipApp health check: {{ 'PASSED' if health_check.status == 200 else 'FAILED' }}"
      when: lookup('env', 'IS_SERVER') == 'true'
